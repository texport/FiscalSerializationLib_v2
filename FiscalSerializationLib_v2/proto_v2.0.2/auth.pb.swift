// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Kkm_Proto_AuthRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var login: String {
    get {return _login ?? String()}
    set {_login = newValue}
  }
  /// Returns true if `login` has been explicitly set.
  var hasLogin: Bool {return self._login != nil}
  /// Clears the value of `login`. Subsequent reads from it will return its default value.
  mutating func clearLogin() {self._login = nil}

  var password: String {
    get {return _password ?? String()}
    set {_password = newValue}
  }
  /// Returns true if `password` has been explicitly set.
  var hasPassword: Bool {return self._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
  mutating func clearPassword() {self._password = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _login: String? = nil
  fileprivate var _password: String? = nil
}

struct Kkm_Proto_AuthResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Kkm_Proto_AuthResponse.ResultTypeEnum {
    get {return _result ?? .resultTypeOk}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var operatorCode: UInt32 {
    get {return _operatorCode ?? 0}
    set {_operatorCode = newValue}
  }
  /// Returns true if `operatorCode` has been explicitly set.
  var hasOperatorCode: Bool {return self._operatorCode != nil}
  /// Clears the value of `operatorCode`. Subsequent reads from it will return its default value.
  mutating func clearOperatorCode() {self._operatorCode = nil}

  var operatorName: String {
    get {return _operatorName ?? String()}
    set {_operatorName = newValue}
  }
  /// Returns true if `operatorName` has been explicitly set.
  var hasOperatorName: Bool {return self._operatorName != nil}
  /// Clears the value of `operatorName`. Subsequent reads from it will return its default value.
  mutating func clearOperatorName() {self._operatorName = nil}

  var roles: [Kkm_Proto_UserRoleEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ResultTypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case resultTypeOk // = 0
    case resultTypeInvalidLoginPassword // = 1

    init() {
      self = .resultTypeOk
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .resultTypeOk
      case 1: self = .resultTypeInvalidLoginPassword
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .resultTypeOk: return 0
      case .resultTypeInvalidLoginPassword: return 1
      }
    }

  }

  init() {}

  fileprivate var _result: Kkm_Proto_AuthResponse.ResultTypeEnum? = nil
  fileprivate var _operatorCode: UInt32? = nil
  fileprivate var _operatorName: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kkm.proto"

extension Kkm_Proto_AuthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "login"),
    2: .same(proto: "password"),
  ]

  public var isInitialized: Bool {
    if self._login == nil {return false}
    if self._password == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._login) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._login {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._password {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_AuthRequest, rhs: Kkm_Proto_AuthRequest) -> Bool {
    if lhs._login != rhs._login {return false}
    if lhs._password != rhs._password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_AuthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "operator_code"),
    3: .standard(proto: "operator_name"),
    4: .same(proto: "roles"),
  ]

  public var isInitialized: Bool {
    if self._result == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._result) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._operatorCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._operatorName) }()
      case 4: try { try decoder.decodeRepeatedEnumField(value: &self.roles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._operatorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._operatorName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.roles.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.roles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_AuthResponse, rhs: Kkm_Proto_AuthResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs._operatorCode != rhs._operatorCode {return false}
    if lhs._operatorName != rhs._operatorName {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_AuthResponse.ResultTypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_TYPE_OK"),
    1: .same(proto: "RESULT_TYPE_INVALID_LOGIN_PASSWORD"),
  ]
}
