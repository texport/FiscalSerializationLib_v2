/** @file
 * @brief Структуры сообщений для передачи данных.
 * 
 * Содержит описания команд, кодов ответов и структуры-обёртки запросов и
 * ответов.
 */

import "common.proto";
import "ticket.proto";
import "report.proto";
import "nomenclature.proto";
import "service.proto";
import "auth.proto";

option optimize_for = SPEED;
option java_package = "org.epicsquad.kkm.proto";

package kkm.proto;

/**
 * @brief Команды.
 * 
 * Функционал взаимодействия ККМ и сервера описывается набором этих команд.
 */
enum CommandTypeEnum {
  
  /// Отправка серверу служебного пакета.
  COMMAND_SYSTEM = 0;
  
  /// Отправка данных чека на сервер и обратное получение номера чека.
  COMMAND_TICKET = 1;
  
  /// Закрытие смены.
  COMMAND_CLOSE_SHIFT = 2;
  
  /// Запрос на получение X, Z или иных отчетов.
  COMMAND_REPORT = 3;
  
  /// Запрос на загрузку текущей версии номенклатуры.
  COMMAND_NOMENCLATURE = 4;
  
  /// Запрос на получение информации о кассе.
  COMMAND_INFO = 5;
  
  /// Внесение и снятие наличных денежных средств.
  COMMAND_MONEY_PLACEMENT = 6;
  
  /// Отмена последней команды COMMAND_TICKET.
  COMMAND_CANCEL_TICKET = 7;
  
  /// Запрос на авторизацию в системе.
  COMMAND_AUTH = 8;

  /// Зарезервировано
  COMMAND_RESERVED = 127;
}

/**
 * @brief Коды ответов.
 * 
 * Сервер отвечает всегда с тем же кодом команды, с которым устройство
 * обратилось к нему. Дополнительно сервер отсылает специальную структуру
 * данных, содержащую код ответа и данные, специфичные для данного кода,
 * если они необходимы. Список кодов ответа общего характера перечислен здесь.
 * Специфические коды ответов для конкретных команд описаны в соответствующих
 * перечислениях.
 */
enum ResultTypeEnum {
  
  /// Команда выполнена успешно.
  ///
  /// Касса работает в штатном режиме.
  RESULT_TYPE_OK = 0;

  /// Неизвестный ID устройства
  ///
  /// Аппарат не зарегистрирован в системе.
  RESULT_TYPE_UNKNOWN_ID = 1;
  
  /// Неверный токен.
  ///
  /// Отправка данных невозможна, необходимо произвести сброс токена.
  RESULT_TYPE_INVALID_TOKEN = 2;

  /// Ошибка протокола.
  ///
  /// Касса обратилась к серверу с неправильно сформированным запросом.
  /// Может возникать, например, при несовместимости версий протоколов.
  RESULT_TYPE_PROTOCOL_ERROR = 3;
  
  /// Неизвестная команда.
  ///
  /// ККМ обратился с кодом команды, неизвестном серверу.
  RESULT_TYPE_UNKNOWN_COMMAND = 4;

  /// Команда не поддерживается.
  ///
  /// ККМ обратился с кодом команды, функциональность которой недоступна
  /// клиенту.
  RESULT_TYPE_UNSUPPORTED_COMMAND = 5;
  
  /// Неверные настройки устройства.
  ///
  /// В настоящее время не поддерживается.
  RESULT_TYPE_INVALID_CONFIGURATION = 6;
  
  /// Использование SSL не разрешено.
  ///
  /// Использование защищенного соединения запрещено. Необходимо подключить
  /// услугу или использовать открытый канал связи.
  RESULT_TYPE_SSL_IS_NOT_ALLOWED = 7;
  
  /// Неправильный номер запроса.
  ///
  /// Порядковый номер запроса @link headers_subsec REQNUM @endlink тот же, что
  /// и в предыдущем запросе, но @link headers_subsec TOKEN @endlink другой.
  RESULT_TYPE_INVALID_REQUEST_NUMBER = 8;
  
  /// Неправильная попытка отправки повторного запроса.
  ///
  /// @link headers_subsec REQNUM @endlink и @link headers_subsec TOKEN @endlink
  /// имеют те же значения, что и в предыдущем запросе, но код команды
  /// отличается.
  RESULT_TYPE_INVALID_RETRY_REQUEST = 9;
    
  /// Невозможно сделать отмену чека.
  ///
  /// Можно отменить только последний чек, и при этом после этого чека не было
  /// отправлено ни одной команды, кроме служебной. 
  /// @deprecated
  RESULT_TYPE_CANT_CANCEL_TICKET = 10;

  /// Время открытой смены истекло.
  ///
  /// Если истек период, в течение которого смена может быть открыта, то сервер
  /// будет возвращать эту ошибку, пока не закроется смена.
  RESULT_TYPE_OPEN_SHIFT_TIMEOUT_EXPIRED = 11;
  
  /// Неправильное имя или пароль.
  ///
  ///@deprecated используйте AuthResponse.
  RESULT_TYPE_INVALID_LOGIN_PASSWORD = 12;

  /// Неверные входные данные.
  ///
  /// Для случаев, когда данные корректны с точки зрения протокола, но не верны
  /// в конкретном контексте.
  RESULT_TYPE_INCORRECT_REQUEST_DATA = 13;
  
  /// Недостаточно наличных.
  ///
  /// Указывает на недостаточность наличных в кассе во время расходных операций.
  RESULT_TYPE_NOT_ENOUGH_CASH = 14;

  /// Касса заблокирована.
  RESULT_TYPE_BLOCKED = 15;

  /// Смена уже была открыта
  RESULT_TYPE_SHIFT_ALREADY_OPENED = 16;

  /// Совпадает значение ИИН/БИН покупателя и продавца
  RESULT_TYPE_SAME_TAXPAYER_AND_CUSTOMER = 17;

  /// Сервис временно недоступен.
  ///
  /// Касса должна разорвать соединение, и далее пытаться соединяться и
  /// отправлять данные в течение @link comm_subsec общего времени на обработку
  /// транзакции @endlink, по истечении которого устройство должно разорвать
  /// соединение, перейти в аварийный режим и выдать соответствующее сообщение.
  RESULT_TYPE_SERVICE_TEMPORARILY_UNAVAILABLE = 254;
  
  /// Неизвестная ошибка.
  ///
  /// Касса должна разорвать соединение и далее пытаться соединяться и отправлять
  /// данные в течение @link comm_subsec общего времени на обработку
  /// транзакции @endlink, по истечении которого устройство должно разорвать
  /// соединение и выдать соответствующее сообщение.
  RESULT_TYPE_UNKNOWN_ERROR = 255;
}

/**
 * @brief Статус ответа сервера.
 * 
 * Служит для определения состояния ответа сервера.
 */
message Result {
  
  /// Код ответа.
  ///
  /// Тип uint32 позволяет использовать весь диапазон значений этого типа,
  /// что дает возможность не ломать бинарную совместимость при расширении
  /// набора кодов ответов. Однако для каждой конкретной версии протокола данное
  /// поле должно иметь значения из диапазона, задаваемого типом
  /// ::ResultTypeEnum.
  required uint32 result_code = 1;
  
  /// Строка ответа.
  ///
  /// Строка с текстом системного характера для обработки ошибок.
  optional string result_text = 2;
}

/**
 * @brief Запрос к серверу.
 * 
 * Содержит код команды, определяющий суть запроса и данные, связанные с этим
 * кодом.
 */
message Request {
  
  /// Код команды.
  ///
  /// Код команды из перечня доступных значений ::CommandTypeEnum.
  required CommandTypeEnum command = 1;
  
  /// Чековая транзакция.
  ///
  /// Данный параметр обязателен, если Request::command == ::COMMAND_TICKET.
  optional TicketRequest ticket = 2;
  
  /// Закрытие смены.
  ///
  /// Данный параметр обязателен, если Request::command ==
  /// ::COMMAND_CLOSE_SHIFT.
  optional CloseShiftRequest close_shift = 3;
  
  /// Запрос отчёта.
  ///
  /// Данный параметр обязателен, если Request::command == ::COMMAND_REPORT.
  optional ReportRequest report = 4;
  
  /// Запрос номенклатуры.
  ///
  /// Данный параметр обязателен, если Request::command ==
  /// ::COMMAND_NOMENCLATURE.
  optional NomenclatureRequest nomenclature = 5;
  
  /// Служебная информация.
  ///
  /// Может передаваться при Request::command == ::COMMAND_SYSTEM или совместно
  /// c другими командами.
  optional ServiceRequest service = 6;
  
  /// Снятие/внесение наличных.
  ///
  /// Данный параметр обязателен, если
  /// Request::command == ::COMMAND_MONEY_PLACEMENT.
  optional MoneyPlacementRequest money_placement = 7;
  
  /// Аутентификация кассира.
  ///
  /// Данный параметр обязателен, если Request::command == ::COMMAND_AUTH.
  optional AuthRequest auth = 8;

}

/**
 * @brief Ответ сервера на запрос устройства.
 * 
 * Содержит код команды, с которым устройство обращалось к серверу, и данные,
 * связанные с этим кодом.
 */
message Response {
  
  /// Код команды.
  ///
  /// Код команды из перечня доступных значений ::CommandTypeEnum. Должен быть
  /// равным коду команды, с которым устройство обратилось к серверу.
  required CommandTypeEnum command = 1;
  
  /// Статус ответа сервера.
  ///
  required Result result = 2;
  
  /// Ответ на команду ::COMMAND_TICKET
  ///
  optional TicketResponse ticket = 3;
  
  /// Ответ на команду ::COMMAND_REPORT
  ///
  optional ReportResponse report = 4;

  /// Ответ на команду ::COMMAND_NOMENCLATURE
  ///
  /// Содержит текущую версию номенклатуры.
  optional NomenclatureResponse nomenclature = 5;
  
  /// Служебная информация.
  ///
  /// Может передаваться как самостоятельный ответ на команду ::COMMAND_SYSTEM
  /// или совместно c ответами на другие команды.
  optional ServiceResponse service = 6;
  
  /// Ответ на команду ::COMMAND_AUTH
  ///
  optional AuthResponse auth = 7;
}
