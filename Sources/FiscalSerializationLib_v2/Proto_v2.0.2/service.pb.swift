// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Kkm_Proto_ServiceRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var commQuality: Kkm_Proto_ServiceRequest.CommQuality {
    get {return _storage._commQuality ?? Kkm_Proto_ServiceRequest.CommQuality()}
    set {_uniqueStorage()._commQuality = newValue}
  }
  /// Returns true if `commQuality` has been explicitly set.
  var hasCommQuality: Bool {return _storage._commQuality != nil}
  /// Clears the value of `commQuality`. Subsequent reads from it will return its default value.
  mutating func clearCommQuality() {_uniqueStorage()._commQuality = nil}

  var securityStats: Kkm_Proto_ServiceRequest.SecurityStats {
    get {return _storage._securityStats ?? Kkm_Proto_ServiceRequest.SecurityStats()}
    set {_uniqueStorage()._securityStats = newValue}
  }
  /// Returns true if `securityStats` has been explicitly set.
  var hasSecurityStats: Bool {return _storage._securityStats != nil}
  /// Clears the value of `securityStats`. Subsequent reads from it will return its default value.
  mutating func clearSecurityStats() {_uniqueStorage()._securityStats = nil}

  /// required since version 201
  var offlinePeriod: Kkm_Proto_ServiceRequest.OfflinePeriod {
    get {return _storage._offlinePeriod ?? Kkm_Proto_ServiceRequest.OfflinePeriod()}
    set {_uniqueStorage()._offlinePeriod = newValue}
  }
  /// Returns true if `offlinePeriod` has been explicitly set.
  var hasOfflinePeriod: Bool {return _storage._offlinePeriod != nil}
  /// Clears the value of `offlinePeriod`. Subsequent reads from it will return its default value.
  mutating func clearOfflinePeriod() {_uniqueStorage()._offlinePeriod = nil}

  var nomenclatureVersion: UInt32 {
    get {return _storage._nomenclatureVersion ?? 0}
    set {_uniqueStorage()._nomenclatureVersion = newValue}
  }
  /// Returns true if `nomenclatureVersion` has been explicitly set.
  var hasNomenclatureVersion: Bool {return _storage._nomenclatureVersion != nil}
  /// Clears the value of `nomenclatureVersion`. Subsequent reads from it will return its default value.
  mutating func clearNomenclatureVersion() {_uniqueStorage()._nomenclatureVersion = nil}

  var ticketAdInfos: [Kkm_Proto_TicketAdInfo] {
    get {return _storage._ticketAdInfos}
    set {_uniqueStorage()._ticketAdInfos = newValue}
  }

  /// required since version 201
  var getRegInfo: Bool {
    get {return _storage._getRegInfo ?? false}
    set {_uniqueStorage()._getRegInfo = newValue}
  }
  /// Returns true if `getRegInfo` has been explicitly set.
  var hasGetRegInfo: Bool {return _storage._getRegInfo != nil}
  /// Clears the value of `getRegInfo`. Subsequent reads from it will return its default value.
  mutating func clearGetRegInfo() {_uniqueStorage()._getRegInfo = nil}

  var getBindedTaxation: Bool {
    get {return _storage._getBindedTaxation ?? false}
    set {_uniqueStorage()._getBindedTaxation = newValue}
  }
  /// Returns true if `getBindedTaxation` has been explicitly set.
  var hasGetBindedTaxation: Bool {return _storage._getBindedTaxation != nil}
  /// Clears the value of `getBindedTaxation`. Subsequent reads from it will return its default value.
  mutating func clearGetBindedTaxation() {_uniqueStorage()._getBindedTaxation = nil}

  var marker: UInt64 {
    get {return _storage._marker ?? 0}
    set {_uniqueStorage()._marker = newValue}
  }
  /// Returns true if `marker` has been explicitly set.
  var hasMarker: Bool {return _storage._marker != nil}
  /// Clears the value of `marker`. Subsequent reads from it will return its default value.
  mutating func clearMarker() {_uniqueStorage()._marker = nil}

  /// tag "10" is used by deprecated structure, please don't reuse
  /// optional SoftwareInformationOld software_information_old = 10;
  var softwareInformationOld: Data {
    get {return _storage._softwareInformationOld ?? Data()}
    set {_uniqueStorage()._softwareInformationOld = newValue}
  }
  /// Returns true if `softwareInformationOld` has been explicitly set.
  var hasSoftwareInformationOld: Bool {return _storage._softwareInformationOld != nil}
  /// Clears the value of `softwareInformationOld`. Subsequent reads from it will return its default value.
  mutating func clearSoftwareInformationOld() {_uniqueStorage()._softwareInformationOld = nil}

  var softwareInformation: Kkm_Proto_ServiceRequest.SoftwareInformation {
    get {return _storage._softwareInformation ?? Kkm_Proto_ServiceRequest.SoftwareInformation()}
    set {_uniqueStorage()._softwareInformation = newValue}
  }
  /// Returns true if `softwareInformation` has been explicitly set.
  var hasSoftwareInformation: Bool {return _storage._softwareInformation != nil}
  /// Clears the value of `softwareInformation`. Subsequent reads from it will return its default value.
  mutating func clearSoftwareInformation() {_uniqueStorage()._softwareInformation = nil}

  var regInfo: Kkm_Proto_ServiceRequest.RegInfo {
    get {return _storage._regInfo ?? Kkm_Proto_ServiceRequest.RegInfo()}
    set {_uniqueStorage()._regInfo = newValue}
  }
  /// Returns true if `regInfo` has been explicitly set.
  var hasRegInfo: Bool {return _storage._regInfo != nil}
  /// Clears the value of `regInfo`. Subsequent reads from it will return its default value.
  mutating func clearRegInfo() {_uniqueStorage()._regInfo = nil}

  var auxiliary: [Kkm_Proto_KeyValuePair] {
    get {return _storage._auxiliary}
    set {_uniqueStorage()._auxiliary = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  /// @brief Информация о качестве связи.
  struct CommQuality: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var avgConnectTime: UInt32 {
      get {return _avgConnectTime ?? 0}
      set {_avgConnectTime = newValue}
    }
    /// Returns true if `avgConnectTime` has been explicitly set.
    var hasAvgConnectTime: Bool {return self._avgConnectTime != nil}
    /// Clears the value of `avgConnectTime`. Subsequent reads from it will return its default value.
    mutating func clearAvgConnectTime() {self._avgConnectTime = nil}

    var avgPing: UInt32 {
      get {return _avgPing ?? 0}
      set {_avgPing = newValue}
    }
    /// Returns true if `avgPing` has been explicitly set.
    var hasAvgPing: Bool {return self._avgPing != nil}
    /// Clears the value of `avgPing`. Subsequent reads from it will return its default value.
    mutating func clearAvgPing() {self._avgPing = nil}

    var lossRatio: UInt32 {
      get {return _lossRatio ?? 0}
      set {_lossRatio = newValue}
    }
    /// Returns true if `lossRatio` has been explicitly set.
    var hasLossRatio: Bool {return self._lossRatio != nil}
    /// Clears the value of `lossRatio`. Subsequent reads from it will return its default value.
    mutating func clearLossRatio() {self._lossRatio = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _avgConnectTime: UInt32? = nil
    fileprivate var _avgPing: UInt32? = nil
    fileprivate var _lossRatio: UInt32? = nil
  }

  ///*
  /// @brief Безопасность и статистика.
  struct SecurityStats: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var geoPosition: Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition {
      get {return _geoPosition ?? Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition()}
      set {_geoPosition = newValue}
    }
    /// Returns true if `geoPosition` has been explicitly set.
    var hasGeoPosition: Bool {return self._geoPosition != nil}
    /// Clears the value of `geoPosition`. Subsequent reads from it will return its default value.
    mutating func clearGeoPosition() {self._geoPosition = nil}

    ///*
    /// @deprecated
    var osVersion: String {
      get {return _osVersion ?? String()}
      set {_osVersion = newValue}
    }
    /// Returns true if `osVersion` has been explicitly set.
    var hasOsVersion: Bool {return self._osVersion != nil}
    /// Clears the value of `osVersion`. Subsequent reads from it will return its default value.
    mutating func clearOsVersion() {self._osVersion = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct GeoPosition: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var latitude: Int32 {
        get {return _latitude ?? 0}
        set {_latitude = newValue}
      }
      /// Returns true if `latitude` has been explicitly set.
      var hasLatitude: Bool {return self._latitude != nil}
      /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
      mutating func clearLatitude() {self._latitude = nil}

      var longitude: Int32 {
        get {return _longitude ?? 0}
        set {_longitude = newValue}
      }
      /// Returns true if `longitude` has been explicitly set.
      var hasLongitude: Bool {return self._longitude != nil}
      /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
      mutating func clearLongitude() {self._longitude = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _latitude: Int32? = nil
      fileprivate var _longitude: Int32? = nil
    }

    init() {}

    fileprivate var _geoPosition: Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition? = nil
    fileprivate var _osVersion: String? = nil
  }

  ///*
  /// @brief Время нахождения в аварийном режиме.
  /// 
  /// Период времени, в течение которого ККМ находилась в аварийном режиме.
  struct OfflinePeriod: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var beginTime: Kkm_Proto_DateTime {
      get {return _beginTime ?? Kkm_Proto_DateTime()}
      set {_beginTime = newValue}
    }
    /// Returns true if `beginTime` has been explicitly set.
    var hasBeginTime: Bool {return self._beginTime != nil}
    /// Clears the value of `beginTime`. Subsequent reads from it will return its default value.
    mutating func clearBeginTime() {self._beginTime = nil}

    var endTime: Kkm_Proto_DateTime {
      get {return _endTime ?? Kkm_Proto_DateTime()}
      set {_endTime = newValue}
    }
    /// Returns true if `endTime` has been explicitly set.
    var hasEndTime: Bool {return self._endTime != nil}
    /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
    mutating func clearEndTime() {self._endTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _beginTime: Kkm_Proto_DateTime? = nil
    fileprivate var _endTime: Kkm_Proto_DateTime? = nil
  }

  struct RegInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var kkm: Kkm_Proto_KkmRegInfo {
      get {return _kkm ?? Kkm_Proto_KkmRegInfo()}
      set {_kkm = newValue}
    }
    /// Returns true if `kkm` has been explicitly set.
    var hasKkm: Bool {return self._kkm != nil}
    /// Clears the value of `kkm`. Subsequent reads from it will return its default value.
    mutating func clearKkm() {self._kkm = nil}

    var org: Kkm_Proto_OrgRegInfo {
      get {return _org ?? Kkm_Proto_OrgRegInfo()}
      set {_org = newValue}
    }
    /// Returns true if `org` has been explicitly set.
    var hasOrg: Bool {return self._org != nil}
    /// Clears the value of `org`. Subsequent reads from it will return its default value.
    mutating func clearOrg() {self._org = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _kkm: Kkm_Proto_KkmRegInfo? = nil
    fileprivate var _org: Kkm_Proto_OrgRegInfo? = nil
  }

  ///*
  /// @brief Информация о программном (и не только) обеспечении.
  struct SoftwareInformation: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var moduleInfos: [Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation] = []

    var hardwareArch: String {
      get {return _hardwareArch ?? String()}
      set {_hardwareArch = newValue}
    }
    /// Returns true if `hardwareArch` has been explicitly set.
    var hasHardwareArch: Bool {return self._hardwareArch != nil}
    /// Clears the value of `hardwareArch`. Subsequent reads from it will return its default value.
    mutating func clearHardwareArch() {self._hardwareArch = nil}

    var osFamily: String {
      get {return _osFamily ?? String()}
      set {_osFamily = newValue}
    }
    /// Returns true if `osFamily` has been explicitly set.
    var hasOsFamily: Bool {return self._osFamily != nil}
    /// Clears the value of `osFamily`. Subsequent reads from it will return its default value.
    mutating func clearOsFamily() {self._osFamily = nil}

    var osVersion: String {
      get {return _osVersion ?? String()}
      set {_osVersion = newValue}
    }
    /// Returns true if `osVersion` has been explicitly set.
    var hasOsVersion: Bool {return self._osVersion != nil}
    /// Clears the value of `osVersion`. Subsequent reads from it will return its default value.
    mutating func clearOsVersion() {self._osVersion = nil}

    var osExtendedInfo: String {
      get {return _osExtendedInfo ?? String()}
      set {_osExtendedInfo = newValue}
    }
    /// Returns true if `osExtendedInfo` has been explicitly set.
    var hasOsExtendedInfo: Bool {return self._osExtendedInfo != nil}
    /// Clears the value of `osExtendedInfo`. Subsequent reads from it will return its default value.
    mutating func clearOsExtendedInfo() {self._osExtendedInfo = nil}

    var runtimeVersion: String {
      get {return _runtimeVersion ?? String()}
      set {_runtimeVersion = newValue}
    }
    /// Returns true if `runtimeVersion` has been explicitly set.
    var hasRuntimeVersion: Bool {return self._runtimeVersion != nil}
    /// Clears the value of `runtimeVersion`. Subsequent reads from it will return its default value.
    mutating func clearRuntimeVersion() {self._runtimeVersion = nil}

    var partnerID: UInt32 {
      get {return _partnerID ?? 0}
      set {_partnerID = newValue}
    }
    /// Returns true if `partnerID` has been explicitly set.
    var hasPartnerID: Bool {return self._partnerID != nil}
    /// Clears the value of `partnerID`. Subsequent reads from it will return its default value.
    mutating func clearPartnerID() {self._partnerID = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    ///*
    /// @brief Информация о программном модуле (vpm библиотека, партнёрское ПО и т.д.).
    struct ModuleInformation: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      var version: String {
        get {return _version ?? String()}
        set {_version = newValue}
      }
      /// Returns true if `version` has been explicitly set.
      var hasVersion: Bool {return self._version != nil}
      /// Clears the value of `version`. Subsequent reads from it will return its default value.
      mutating func clearVersion() {self._version = nil}

      var buildInfo: String {
        get {return _buildInfo ?? String()}
        set {_buildInfo = newValue}
      }
      /// Returns true if `buildInfo` has been explicitly set.
      var hasBuildInfo: Bool {return self._buildInfo != nil}
      /// Clears the value of `buildInfo`. Subsequent reads from it will return its default value.
      mutating func clearBuildInfo() {self._buildInfo = nil}

      var deviceInfo: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation {
        get {return _deviceInfo ?? Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation()}
        set {_deviceInfo = newValue}
      }
      /// Returns true if `deviceInfo` has been explicitly set.
      var hasDeviceInfo: Bool {return self._deviceInfo != nil}
      /// Clears the value of `deviceInfo`. Subsequent reads from it will return its default value.
      mutating func clearDeviceInfo() {self._deviceInfo = nil}

      var extendedInfo: [Kkm_Proto_KeyValuePair] = []

      var buildArch: String {
        get {return _buildArch ?? String()}
        set {_buildArch = newValue}
      }
      /// Returns true if `buildArch` has been explicitly set.
      var hasBuildArch: Bool {return self._buildArch != nil}
      /// Clears the value of `buildArch`. Subsequent reads from it will return its default value.
      mutating func clearBuildArch() {self._buildArch = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// @brief Информация об устройстве (для мобильных платформ или ФР).
      struct DeviceInformation: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var manufacturer: String {
          get {return _manufacturer ?? String()}
          set {_manufacturer = newValue}
        }
        /// Returns true if `manufacturer` has been explicitly set.
        var hasManufacturer: Bool {return self._manufacturer != nil}
        /// Clears the value of `manufacturer`. Subsequent reads from it will return its default value.
        mutating func clearManufacturer() {self._manufacturer = nil}

        var model: String {
          get {return _model ?? String()}
          set {_model = newValue}
        }
        /// Returns true if `model` has been explicitly set.
        var hasModel: Bool {return self._model != nil}
        /// Clears the value of `model`. Subsequent reads from it will return its default value.
        mutating func clearModel() {self._model = nil}

        var firmwareVersion: String {
          get {return _firmwareVersion ?? String()}
          set {_firmwareVersion = newValue}
        }
        /// Returns true if `firmwareVersion` has been explicitly set.
        var hasFirmwareVersion: Bool {return self._firmwareVersion != nil}
        /// Clears the value of `firmwareVersion`. Subsequent reads from it will return its default value.
        mutating func clearFirmwareVersion() {self._firmwareVersion = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _manufacturer: String? = nil
        fileprivate var _model: String? = nil
        fileprivate var _firmwareVersion: String? = nil
      }

      init() {}

      fileprivate var _name: String? = nil
      fileprivate var _version: String? = nil
      fileprivate var _buildInfo: String? = nil
      fileprivate var _deviceInfo: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation? = nil
      fileprivate var _buildArch: String? = nil
    }

    init() {}

    fileprivate var _hardwareArch: String? = nil
    fileprivate var _osFamily: String? = nil
    fileprivate var _osVersion: String? = nil
    fileprivate var _osExtendedInfo: String? = nil
    fileprivate var _runtimeVersion: String? = nil
    fileprivate var _partnerID: UInt32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Kkm_Proto_ServiceResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticketAds: [Kkm_Proto_TicketAd] {
    get {return _storage._ticketAds}
    set {_uniqueStorage()._ticketAds = newValue}
  }

  var regInfo: Kkm_Proto_ServiceResponse.RegInfo {
    get {return _storage._regInfo ?? Kkm_Proto_ServiceResponse.RegInfo()}
    set {_uniqueStorage()._regInfo = newValue}
  }
  /// Returns true if `regInfo` has been explicitly set.
  var hasRegInfo: Bool {return _storage._regInfo != nil}
  /// Clears the value of `regInfo`. Subsequent reads from it will return its default value.
  mutating func clearRegInfo() {_uniqueStorage()._regInfo = nil}

  var bindedTaxation: Kkm_Proto_BindedTaxation {
    get {return _storage._bindedTaxation ?? Kkm_Proto_BindedTaxation()}
    set {_uniqueStorage()._bindedTaxation = newValue}
  }
  /// Returns true if `bindedTaxation` has been explicitly set.
  var hasBindedTaxation: Bool {return _storage._bindedTaxation != nil}
  /// Clears the value of `bindedTaxation`. Subsequent reads from it will return its default value.
  mutating func clearBindedTaxation() {_uniqueStorage()._bindedTaxation = nil}

  var lastDocumentInfo: Kkm_Proto_ServiceResponse.LastDocumentInfo {
    get {return _storage._lastDocumentInfo ?? Kkm_Proto_ServiceResponse.LastDocumentInfo()}
    set {_uniqueStorage()._lastDocumentInfo = newValue}
  }
  /// Returns true if `lastDocumentInfo` has been explicitly set.
  var hasLastDocumentInfo: Bool {return _storage._lastDocumentInfo != nil}
  /// Clears the value of `lastDocumentInfo`. Subsequent reads from it will return its default value.
  mutating func clearLastDocumentInfo() {_uniqueStorage()._lastDocumentInfo = nil}

  var auxiliary: [Kkm_Proto_KeyValuePair] {
    get {return _storage._auxiliary}
    set {_uniqueStorage()._auxiliary = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RegInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var kkm: Kkm_Proto_KkmRegInfo {
      get {return _kkm ?? Kkm_Proto_KkmRegInfo()}
      set {_kkm = newValue}
    }
    /// Returns true if `kkm` has been explicitly set.
    var hasKkm: Bool {return self._kkm != nil}
    /// Clears the value of `kkm`. Subsequent reads from it will return its default value.
    mutating func clearKkm() {self._kkm = nil}

    var pos: Kkm_Proto_PosRegInfo {
      get {return _pos ?? Kkm_Proto_PosRegInfo()}
      set {_pos = newValue}
    }
    /// Returns true if `pos` has been explicitly set.
    var hasPos: Bool {return self._pos != nil}
    /// Clears the value of `pos`. Subsequent reads from it will return its default value.
    mutating func clearPos() {self._pos = nil}

    var org: Kkm_Proto_OrgRegInfo {
      get {return _org ?? Kkm_Proto_OrgRegInfo()}
      set {_org = newValue}
    }
    /// Returns true if `org` has been explicitly set.
    var hasOrg: Bool {return self._org != nil}
    /// Clears the value of `org`. Subsequent reads from it will return its default value.
    mutating func clearOrg() {self._org = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _kkm: Kkm_Proto_KkmRegInfo? = nil
    fileprivate var _pos: Kkm_Proto_PosRegInfo? = nil
    fileprivate var _org: Kkm_Proto_OrgRegInfo? = nil
  }

  struct LastDocumentInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var frShiftNumber: UInt32 {
      get {return _frShiftNumber ?? 0}
      set {_frShiftNumber = newValue}
    }
    /// Returns true if `frShiftNumber` has been explicitly set.
    var hasFrShiftNumber: Bool {return self._frShiftNumber != nil}
    /// Clears the value of `frShiftNumber`. Subsequent reads from it will return its default value.
    mutating func clearFrShiftNumber() {self._frShiftNumber = nil}

    var printedDocumentNumber: UInt64 {
      get {return _printedDocumentNumber ?? 0}
      set {_printedDocumentNumber = newValue}
    }
    /// Returns true if `printedDocumentNumber` has been explicitly set.
    var hasPrintedDocumentNumber: Bool {return self._printedDocumentNumber != nil}
    /// Clears the value of `printedDocumentNumber`. Subsequent reads from it will return its default value.
    mutating func clearPrintedDocumentNumber() {self._printedDocumentNumber = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _frShiftNumber: UInt32? = nil
    fileprivate var _printedDocumentNumber: UInt64? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kkm.proto"

extension Kkm_Proto_ServiceRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "comm_quality"),
    3: .standard(proto: "security_stats"),
    4: .standard(proto: "offline_period"),
    5: .standard(proto: "nomenclature_version"),
    6: .standard(proto: "ticket_ad_infos"),
    7: .standard(proto: "get_reg_info"),
    8: .standard(proto: "get_binded_taxation"),
    9: .same(proto: "marker"),
    10: .standard(proto: "software_information_old"),
    11: .standard(proto: "software_information"),
    12: .standard(proto: "reg_info"),
    60: .same(proto: "auxiliary"),
  ]

  fileprivate class _StorageClass {
    var _commQuality: Kkm_Proto_ServiceRequest.CommQuality? = nil
    var _securityStats: Kkm_Proto_ServiceRequest.SecurityStats? = nil
    var _offlinePeriod: Kkm_Proto_ServiceRequest.OfflinePeriod? = nil
    var _nomenclatureVersion: UInt32? = nil
    var _ticketAdInfos: [Kkm_Proto_TicketAdInfo] = []
    var _getRegInfo: Bool? = nil
    var _getBindedTaxation: Bool? = nil
    var _marker: UInt64? = nil
    var _softwareInformationOld: Data? = nil
    var _softwareInformation: Kkm_Proto_ServiceRequest.SoftwareInformation? = nil
    var _regInfo: Kkm_Proto_ServiceRequest.RegInfo? = nil
    var _auxiliary: [Kkm_Proto_KeyValuePair] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _commQuality = source._commQuality
      _securityStats = source._securityStats
      _offlinePeriod = source._offlinePeriod
      _nomenclatureVersion = source._nomenclatureVersion
      _ticketAdInfos = source._ticketAdInfos
      _getRegInfo = source._getRegInfo
      _getBindedTaxation = source._getBindedTaxation
      _marker = source._marker
      _softwareInformationOld = source._softwareInformationOld
      _softwareInformation = source._softwareInformation
      _regInfo = source._regInfo
      _auxiliary = source._auxiliary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._commQuality, !v.isInitialized {return false}
      if let v = _storage._securityStats, !v.isInitialized {return false}
      if let v = _storage._offlinePeriod, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._ticketAdInfos) {return false}
      if let v = _storage._softwareInformation, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._auxiliary) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._commQuality) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._securityStats) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._offlinePeriod) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._nomenclatureVersion) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._ticketAdInfos) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._getRegInfo) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._getBindedTaxation) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._marker) }()
        case 10: try { try decoder.decodeSingularBytesField(value: &_storage._softwareInformationOld) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._softwareInformation) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._regInfo) }()
        case 60: try { try decoder.decodeRepeatedMessageField(value: &_storage._auxiliary) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._commQuality {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._securityStats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._offlinePeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._nomenclatureVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      if !_storage._ticketAdInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ticketAdInfos, fieldNumber: 6)
      }
      try { if let v = _storage._getRegInfo {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._getBindedTaxation {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._marker {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._softwareInformationOld {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._softwareInformation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._regInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._auxiliary.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._auxiliary, fieldNumber: 60)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest, rhs: Kkm_Proto_ServiceRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._commQuality != rhs_storage._commQuality {return false}
        if _storage._securityStats != rhs_storage._securityStats {return false}
        if _storage._offlinePeriod != rhs_storage._offlinePeriod {return false}
        if _storage._nomenclatureVersion != rhs_storage._nomenclatureVersion {return false}
        if _storage._ticketAdInfos != rhs_storage._ticketAdInfos {return false}
        if _storage._getRegInfo != rhs_storage._getRegInfo {return false}
        if _storage._getBindedTaxation != rhs_storage._getBindedTaxation {return false}
        if _storage._marker != rhs_storage._marker {return false}
        if _storage._softwareInformationOld != rhs_storage._softwareInformationOld {return false}
        if _storage._softwareInformation != rhs_storage._softwareInformation {return false}
        if _storage._regInfo != rhs_storage._regInfo {return false}
        if _storage._auxiliary != rhs_storage._auxiliary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.CommQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.protoMessageName + ".CommQuality"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avg_connect_time"),
    2: .standard(proto: "avg_ping"),
    3: .standard(proto: "loss_ratio"),
  ]

  public var isInitialized: Bool {
    if self._avgConnectTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._avgConnectTime) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._avgPing) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._lossRatio) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._avgConnectTime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._avgPing {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._lossRatio {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.CommQuality, rhs: Kkm_Proto_ServiceRequest.CommQuality) -> Bool {
    if lhs._avgConnectTime != rhs._avgConnectTime {return false}
    if lhs._avgPing != rhs._avgPing {return false}
    if lhs._lossRatio != rhs._lossRatio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.SecurityStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.protoMessageName + ".SecurityStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "geo_position"),
    2: .standard(proto: "os_version"),
  ]

  public var isInitialized: Bool {
    if let v = self._geoPosition, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._geoPosition) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._osVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._geoPosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._osVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.SecurityStats, rhs: Kkm_Proto_ServiceRequest.SecurityStats) -> Bool {
    if lhs._geoPosition != rhs._geoPosition {return false}
    if lhs._osVersion != rhs._osVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.SecurityStats.protoMessageName + ".GeoPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public var isInitialized: Bool {
    if self._latitude == nil {return false}
    if self._longitude == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._latitude) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._longitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._latitude {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._longitude {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition, rhs: Kkm_Proto_ServiceRequest.SecurityStats.GeoPosition) -> Bool {
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.OfflinePeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.protoMessageName + ".OfflinePeriod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "begin_time"),
    2: .standard(proto: "end_time"),
  ]

  public var isInitialized: Bool {
    if self._beginTime == nil {return false}
    if self._endTime == nil {return false}
    if let v = self._beginTime, !v.isInitialized {return false}
    if let v = self._endTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._beginTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._beginTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.OfflinePeriod, rhs: Kkm_Proto_ServiceRequest.OfflinePeriod) -> Bool {
    if lhs._beginTime != rhs._beginTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.RegInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.protoMessageName + ".RegInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kkm"),
    2: .same(proto: "org"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._kkm) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._org) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._kkm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._org {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.RegInfo, rhs: Kkm_Proto_ServiceRequest.RegInfo) -> Bool {
    if lhs._kkm != rhs._kkm {return false}
    if lhs._org != rhs._org {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.SoftwareInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.protoMessageName + ".SoftwareInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_infos"),
    2: .standard(proto: "hardware_arch"),
    3: .standard(proto: "os_family"),
    4: .standard(proto: "os_version"),
    5: .standard(proto: "os_extended_info"),
    6: .standard(proto: "runtime_version"),
    7: .standard(proto: "partner_id"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.moduleInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.moduleInfos) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._hardwareArch) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._osFamily) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._osVersion) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._osExtendedInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._runtimeVersion) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._partnerID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.moduleInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.moduleInfos, fieldNumber: 1)
    }
    try { if let v = self._hardwareArch {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._osFamily {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._osVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._osExtendedInfo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._runtimeVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._partnerID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.SoftwareInformation, rhs: Kkm_Proto_ServiceRequest.SoftwareInformation) -> Bool {
    if lhs.moduleInfos != rhs.moduleInfos {return false}
    if lhs._hardwareArch != rhs._hardwareArch {return false}
    if lhs._osFamily != rhs._osFamily {return false}
    if lhs._osVersion != rhs._osVersion {return false}
    if lhs._osExtendedInfo != rhs._osExtendedInfo {return false}
    if lhs._runtimeVersion != rhs._runtimeVersion {return false}
    if lhs._partnerID != rhs._partnerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.SoftwareInformation.protoMessageName + ".ModuleInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
    3: .standard(proto: "build_info"),
    4: .standard(proto: "device_info"),
    5: .standard(proto: "extended_info"),
    6: .standard(proto: "build_arch"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._version == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.extendedInfo) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._version) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._buildInfo) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._deviceInfo) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.extendedInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._buildArch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._buildInfo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._deviceInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.extendedInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extendedInfo, fieldNumber: 5)
    }
    try { if let v = self._buildArch {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation, rhs: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._version != rhs._version {return false}
    if lhs._buildInfo != rhs._buildInfo {return false}
    if lhs._deviceInfo != rhs._deviceInfo {return false}
    if lhs.extendedInfo != rhs.extendedInfo {return false}
    if lhs._buildArch != rhs._buildArch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.protoMessageName + ".DeviceInformation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "manufacturer"),
    2: .same(proto: "model"),
    3: .standard(proto: "firmware_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._manufacturer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._firmwareVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._manufacturer {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._firmwareVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation, rhs: Kkm_Proto_ServiceRequest.SoftwareInformation.ModuleInformation.DeviceInformation) -> Bool {
    if lhs._manufacturer != rhs._manufacturer {return false}
    if lhs._model != rhs._model {return false}
    if lhs._firmwareVersion != rhs._firmwareVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ticket_ads"),
    2: .standard(proto: "reg_info"),
    3: .standard(proto: "binded_taxation"),
    4: .standard(proto: "last_document_info"),
    30: .same(proto: "auxiliary"),
  ]

  fileprivate class _StorageClass {
    var _ticketAds: [Kkm_Proto_TicketAd] = []
    var _regInfo: Kkm_Proto_ServiceResponse.RegInfo? = nil
    var _bindedTaxation: Kkm_Proto_BindedTaxation? = nil
    var _lastDocumentInfo: Kkm_Proto_ServiceResponse.LastDocumentInfo? = nil
    var _auxiliary: [Kkm_Proto_KeyValuePair] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _ticketAds = source._ticketAds
      _regInfo = source._regInfo
      _bindedTaxation = source._bindedTaxation
      _lastDocumentInfo = source._lastDocumentInfo
      _auxiliary = source._auxiliary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._ticketAds) {return false}
      if let v = _storage._bindedTaxation, !v.isInitialized {return false}
      if let v = _storage._lastDocumentInfo, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._auxiliary) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._ticketAds) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._regInfo) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._bindedTaxation) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lastDocumentInfo) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._auxiliary) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._ticketAds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ticketAds, fieldNumber: 1)
      }
      try { if let v = _storage._regInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._bindedTaxation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lastDocumentInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._auxiliary.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._auxiliary, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceResponse, rhs: Kkm_Proto_ServiceResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ticketAds != rhs_storage._ticketAds {return false}
        if _storage._regInfo != rhs_storage._regInfo {return false}
        if _storage._bindedTaxation != rhs_storage._bindedTaxation {return false}
        if _storage._lastDocumentInfo != rhs_storage._lastDocumentInfo {return false}
        if _storage._auxiliary != rhs_storage._auxiliary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceResponse.RegInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceResponse.protoMessageName + ".RegInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kkm"),
    2: .same(proto: "pos"),
    3: .same(proto: "org"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._kkm) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pos) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._org) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._kkm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pos {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._org {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceResponse.RegInfo, rhs: Kkm_Proto_ServiceResponse.RegInfo) -> Bool {
    if lhs._kkm != rhs._kkm {return false}
    if lhs._pos != rhs._pos {return false}
    if lhs._org != rhs._org {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kkm_Proto_ServiceResponse.LastDocumentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Kkm_Proto_ServiceResponse.protoMessageName + ".LastDocumentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fr_shift_number"),
    2: .standard(proto: "printed_document_number"),
  ]

  public var isInitialized: Bool {
    if self._frShiftNumber == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._frShiftNumber) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._printedDocumentNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._frShiftNumber {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._printedDocumentNumber {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kkm_Proto_ServiceResponse.LastDocumentInfo, rhs: Kkm_Proto_ServiceResponse.LastDocumentInfo) -> Bool {
    if lhs._frShiftNumber != rhs._frShiftNumber {return false}
    if lhs._printedDocumentNumber != rhs._printedDocumentNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
